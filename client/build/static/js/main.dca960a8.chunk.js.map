{"version":3,"sources":["App.js","index.js"],"names":["App","useState","title","author","body","date","posts","setPosts","post","setPost","handleChange","e","target","name","value","prevInput","useEffect","fetch","then","res","ok","json","jsonRes","Grommet","plain","TextInput","placeholder","onChange","TextArea","format","Button","onClick","preventDefault","newPost","axios","primary","label","map","id","_id","delete","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAsJeA,MAjJf,WAIE,MAA0BC,mBAAS,CACjC,CACEC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,KAAM,OALV,mBAAOC,EAAP,KAAcC,EAAd,KAWA,EAAwBN,mBACtB,CACEC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,KAAM,MALV,mBAAOG,EAAP,KAAaC,EAAb,KA4BA,SAASC,EAAaC,GAEpB,MAAsBA,EAAEC,OAAjBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAEbL,GAAQ,SAAAM,GAEN,kCAEOA,GAFP,kBAGKF,EAAOC,OAiChB,OA1DAE,qBAAU,WAERC,MAAM,UAAUC,MAAK,SAAAC,GAEnB,GAAGA,EAAIC,GACL,OAAOD,EAAIE,UAIZH,MAAK,SAAAI,GAAO,OAAIf,EAASe,SAkD5B,eAACC,EAAA,EAAD,CAASC,OAAK,EAAd,UAGI,0CAEA,iCAEE,cAACC,EAAA,EAAD,CACAC,YAAY,QACZZ,MAAON,EAAKN,MACZyB,SAAUjB,EACVG,KAAK,UAGL,cAACY,EAAA,EAAD,CACAC,YAAY,SACZZ,MAAON,EAAKL,OACZwB,SAAUjB,EACVG,KAAK,WAGL,cAACe,EAAA,EAAD,CACAF,YAAY,OACZZ,MAAON,EAAKJ,KACZuB,SAAUjB,EACVG,KAAK,SAGL,cAACY,EAAA,EAAD,CACAI,OAAO,aACPf,MAAON,EAAKH,KACZsB,SAAUjB,EACVG,KAAK,SAGL,cAACiB,EAAA,EAAD,CAAQC,QA9DhB,SAAiBpB,GAIfA,EAAEqB,iBAGF,IAAMC,EAAU,CACd/B,MAAOM,EAAKN,MACZC,OAAQK,EAAKL,OACbC,KAAMI,EAAKJ,KACXC,KAAMG,EAAKH,MAIb6B,IAAM1B,KAAK,WAAYyB,IA+CSE,SAAO,EAACC,MAAM,iBAIzC9B,EAAM+B,KAAI,SAAA7B,GAET,OAEE,gCAEE,6BAAKA,EAAKN,QACV,6BAAKM,EAAKL,SACV,4BAAIK,EAAKJ,OACT,4BAAII,EAAKH,OACT,cAACyB,EAAA,EAAD,CAAQC,QAAS,kBAzDTO,EAyD0B9B,EAAK+B,IAxDjDL,IAAMM,OAAO,WAAaF,QAC1BG,MAAM,gBAFR,IAAoBH,GAyDqCF,MAAM,0BCvIjEM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dca960a8.chunk.js","sourcesContent":["\nimport {React, useState, useEffect} from 'react'\nimport axios from \"axios\";\nimport { Grommet, Button, TextInput, TextArea } from 'grommet';\n\nfunction App() {\n  \n  //using state which at first is empty but soon will store data collected from our MongoDB \n  //we are using an array of objects because state is saving multiple posts\n  const [posts, setPosts] = useState([\n    {\n      title: \" \",\n      author: \" \",\n      body: \" \",\n      date: \" \",\n    }\n  ]);\n\n  //setting state variable to hold user entered data\n  //note the single object \n  const [post, setPost] = useState(\n    {\n      title: \" \",\n      author: \" \",\n      body: \" \",\n      date: \" \",\n    }\n  );\n\n//CONNECTING TO BACKEND DATA AND DISPLAYING THAT DATA ON THE FRONT END\n\n//fetch the data from /posts API and return a json\n  useEffect(() => {\n\n    fetch('/posts').then(res => {\n\n      if(res.ok) {\n        return res.json()\n      }\n\n      //set state equal to the json response\n    }).then(jsonRes => setPosts(jsonRes))\n  });\n\n  //POSTING NEW DATA TO THE BACKEND\n  \n  //handleChange tracks what is being typed \n  // 'e' has two peices of data, the name and value of inputs\n  function handleChange(e) {\n\n    const {name, value} = e.target;\n\n    setPost(prevInput => {\n\n      return(\n        {\n          ...prevInput,\n          [name]: value\n        }\n      )\n    })\n  }\n\n  //addPost function\n  function addPost(e) {\n\n    //a preventDefault is called on the event when \n    //submitting the form to prevent a browser reload/refresh.\n    e.preventDefault();\n\n    //gets value from state variable post\n    const newPost = {\n      title: post.title,\n      author: post.author,\n      body: post.body,\n      date: post.date\n    }\n\n    //posts newPost variable to proxy \n    axios.post('/newPost', newPost)\n  }\n\n  // REMOVING POST DATA FROM MONGODB\n  function deletePost(id){\n    axios.delete('/delete/' + id)\n    alert(\"Post Removed\")\n  }\n  \n  // input names are required to parse from body req in our server\n  //value is set to whatever value was saved in state variable post\n  return (\n    <Grommet plain>\n    \n\n        <h1>Add Post</h1>\n\n        <form>\n\n          <TextInput\n          placeholder=\"title\"\n          value={post.title}\n          onChange={handleChange}\n          name=\"title\"\n          />\n\n          <TextInput\n          placeholder=\"author\"\n          value={post.author}\n          onChange={handleChange}\n          name=\"author\"\n          />\n\n          <TextArea\n          placeholder=\"body\"\n          value={post.body}\n          onChange={handleChange}\n          name=\"body\"\n          />\n\n          <TextInput\n          format=\"mm/dd/yyyy\"\n          value={post.date}\n          onChange={handleChange}\n          name=\"date\"\n          />\n\n          <Button onClick={addPost} primary label=\"Save Post\" />\n\n        </form>\n\n        {posts.map(post => {\n\n          return (\n\n            <div>\n\n              <h1>{post.title}</h1>\n              <h2>{post.author}</h2>\n              <p>{post.body}</p>\n              <p>{post.date}</p>\n              <Button onClick={() => deletePost(post._id)} label=\"Delete Post\" />\n            \n            </div>\n          )\n        })}\n      \n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}